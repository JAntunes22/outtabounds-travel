rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if the current user is an admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.token.email)) && 
        get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.isAdmin == true;
    }
    
    // Function to check if the user is accessing their own data
    function isOwner(userId) {
      return request.auth != null && request.auth.token.email == userId;
    }
    
    // Rules for users collection
    match /users/{userId} {
      allow read: if request.auth != null && (isOwner(userId) || isAdmin());
      allow create: if request.auth != null && isOwner(userId);
      allow update: if request.auth != null && (
        (isOwner(userId) && 
         !('isAdmin' in request.resource.data)) || 
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Rules for courses collection
    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Rules for inquiries collection
    match /inquiries/{inquiryId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.token.email || isAdmin());
      allow create: if request.auth != null;
      allow update, delete: if isAdmin();
    }
    
    // Rules for experiences collection
    match /experiences/{experienceId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Default rules for other collections
    match /{document=**} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
  }
} 