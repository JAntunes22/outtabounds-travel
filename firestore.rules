rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if the current user is an admin
    function isAdmin() {
      return request.auth != null && 
        (
          // Check token claims
          (request.auth.token.admin == true) ||
          // Check email document  
          (request.auth.token.email != null && 
            exists(/databases/$(database)/documents/users/$(request.auth.token.email)) && 
            get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.isAdmin == true) ||
          // Check UID document
          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true)
        );
    }
    
    // Function to check if the user is accessing their own data
    function isOwner(userId) {
      return request.auth != null && 
        (request.auth.token.email == userId || request.auth.uid == userId);
    }
    
    // Rules for users collection 
    match /users/{userId} {
      // Allow users to read their own document and admins to read all
      allow read: if request.auth != null && (isOwner(userId) || isAdmin());
      
      // Allow user to create their own document with restrictions
      allow create: if request.auth != null && 
        (userId == request.auth.uid || userId == request.auth.token.email) && 
        (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == false);
      
      // Allow user to update their own document, but not change admin status
      allow update: if request.auth != null && 
        (
          // Admins can update any user doc
          isAdmin() ||
          // Regular users can update their own doc but not set isAdmin
          (isOwner(userId) && 
            (!('isAdmin' in request.resource.data) || 
              (resource.data.isAdmin == request.resource.data.isAdmin)))
        );
      
      // Only admins can delete user documents
      allow delete: if isAdmin();
    }
    
    // Rules for courses collection
    match /courses/{courseId} {
      // Anyone can read courses (for marketing purposes)
      allow read: if true;
      // Only admins can write to courses
      allow write: if isAdmin();
    }
    
    // Rules for inquiries collection
    match /inquiries/{inquiryId} {
      // Users can read their own inquiries, admins can read all
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.userId == request.auth.token.email || 
         resource.data.email == request.auth.token.email || 
         isAdmin());
         
      // Authenticated users can create inquiries
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || 
         request.resource.data.userId == request.auth.token.email || 
         request.resource.data.email == request.auth.token.email);
         
      // Only admins can update or delete inquiries
      allow update, delete: if isAdmin();
    }
    
    // Rules for experiences collection
    match /experiences/{experienceId} {
      // Anyone can read experiences (for marketing purposes)
      allow read: if true;
      // Only admins can write to experiences
      allow write: if isAdmin();
    }
    
    // Rules for packs collection
    match /packs/{packId} {
      // Anyone can read packs (for marketing purposes)
      allow read: if true;
      // Only admins can write to packs
      allow write: if isAdmin();
    }
    
    // Rules for accommodations collection
    match /accommodations/{accommodationId} {
      // Anyone can read accommodations (for marketing purposes)
      allow read: if true;
      // Only admins can write to accommodations
      allow write: if isAdmin();
    }
    
    // Rules for services collection
    match /services/{serviceId} {
      // Anyone can read services (for marketing purposes)
      allow read: if true;
      // Only admins can write to services
      allow write: if isAdmin();
    }
    
    // Rules for settings collection
    match /settings/{settingId} {
      // Anyone can read settings (for featured packs, etc.)
      allow read: if true;
      // Only admins can write to settings
      allow write: if isAdmin();
    }
    
    // Rules for adminLogs collection
    match /adminLogs/{logId} {
      // Only admins can read admin logs
      allow read: if isAdmin();
      // No one can directly write to admin logs (should be handled by Cloud Functions)
      allow write: if false;
    }
    
    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 